; ECE-222 Lab ... Winter 2013 term 
; Lab 3 sample code 
				THUMB 		; Thumb instruction set 
                AREA 		My_code, CODE, READONLY
                EXPORT 		__MAIN
				ENTRY  
__MAIN

; The following lines are similar to Lab-1 but use a defined address to make it easier.
; They just turn off all LEDs 
				LDR			R10, =LED_BASE_ADR		; R10 is a permenant pointer to the base address for the LEDs, offset of 0x20 and 0x40 for the ports
				MOV 		R3, #0xB0000000			; Turn off three LEDs on port 1  
				STR 		R3, [R10, #0x20]		;
				MOV 		R3, #0x0000007C			;
				STR 		R3, [R10, #0x40] 		; Turn off five LEDs on port 2 
				MOV 		R6, #0x00				; 
				STRB 		R6, [R10, #0x41]		;
				MOV 		R11, #0xACDC			; Our random number
				
				B			BEGIN	
				;B			COUNTER
				
BEGIN
				BL			RandomNum
				MOV			R0, R11					; Loading our random number into R0 which controls the delay time 
				BFC			R0, #4, #28				; Clear all but the lowest for bits of R0
				
				MOV			R5, #5333				; Load 1/15 of 8s/0.1ms for delay function into R0
				MUL			R0, R0, R5 				
				MOV			R5, #20000				; Add 2s to the random delay
				ADD			R0, R0, R5 				
				BL			DELAY				
				MOV			R4, #0x90000000			; Turn on P1.29 and other 2 LEDs off
				STR			R4, [R10, #0x20]		
				MOV 		R4, #0x0000007C			; Turn off five LEDs on port
				STR 		R4, [R10, #0x40] 		
				
				MOV			R0, #1					; 0.1ms DELAY
				MOV 		R3, #0xFFFFFFFF			; Set starting value of counter
				B			POLLING
				
POLLING	
				BL			DELAY					; Polls every 0.1ms
				SUB			R3, #1					; Decrement counter
				
				;Button INT0
				LDR 		R9, =FIO2PIN			; Load address of input button into R9
				LDR 		R6, [R9]				; Load value into R6
				ANDS		R6, #0x400				; Compare 11th bit of input port to check button pressed
				
				;Joystick P1.24
				; LDR 		R9, =FIO1PIN
				; LDR 		R6, [R9]
				; ANDS		R6, #0x01000000
				
				BNE			POLLING					; Keeps polling if button is not pressed
				BEQ 		DISPLAY_REACTION
				
DISPLAY_REACTION
				BL			DISPLAY_NUM				; Display bottom 8 bits
				MOV 		R0, #20000				; Display for 2s each
				BL			DELAY
				
				ROR			R3, #8					; Shift to the next 8 bits
				BL			DISPLAY_NUM
				BL			DELAY		
				
				ROR			R3, #8
				BL			DISPLAY_NUM
				BL			DELAY		
				
				ROR			R3, #8
				BL			DISPLAY_NUM
				BL			DELAY
				
				ROR			R3, #8
				
				MOV			R0, #50000 				; Delay 5s before resetting
				BL 			DELAY
				
				B			DISPLAY_REACTION
				

; Code for counter
				
COUNTER				
				MOV			R3, #0xFF
				MOV 		R0, #1000
CounterLoop	
				SUB   		R3, R3, #1
				BL			DISPLAY_NUM
				BL 			DELAY
				B 			CounterLoop


; This line is very important in your main program
; Initializes R11 to a 16-bit non-zero value and NOTHING else can write to R11 !!
				; MOV			R11, #0xABCD		; Init the random number generator with a non-zero number
; loop 			BL 			RandomNum 
				; B loop

				; MOV 		R0, #0x0000186A ;Delay 10s code for testing		
				; LSL			R0, R0, 4
				; BL 			DELAY
				; MOV 		R3, #0xA0000000		; Turn off three LEDs on port 1  
				; STR 		R3, [R10, #0x20]
;
; Display the number in R3 onto the 8 LEDs **NOTE: Reversed bit-mapping
; Eg. 0 = 1, 1 = 0
DISPLAY_NUM		STMFD		R13!,{R1, R2, R9, R14}
				
				;Lower 5 bits
				MOV			R2, #0				
				RBIT		R9, R3				; Reverse bits of counter and store into R9
				BFC			R9, #0, #27			; Clear the lower 27 bits
				EOR			R2, R2, R9			
				LSR			R2, #25				; Shift so they are in the correct position for port mapping
				
				STR			R2, [R10, #0x40]	
				
				;6th bit
				MOV			R2, #0x40000000 	; 0100 position for port mapping position
				RBIT		R9, R3				;	
				BFC			R9, #0, #26			; Clear the lower 26 bits
				BFC			R9, #27, #5			; Clear higher 5 bits
				LSL			R9, #5				; Shift so they are in the correct position for port mapping
				EOR			R2, R2, R9
				
				;Higher 2 bits
				RBIT		R9, R3
				BFC			R9, #0, #24			; Clear the lower 26 bits
				BFC			R9, #26, #6			; Clear higher 6 bits
				LSL			R9, #4				; Shift so they are in the correct position for port mapping
				EOR			R2, R2, R9
				
				STR			R2, [R10, #0x20] 	; Storing to address contolling the LEDs
				
; Usefull commaands:  RBIT (reverse bits), BFC (bit field clear), LSR & LSL to shift bits left and right, ORR & AND and EOR for bitwise operations
				
				LDMFD		R13!,{R1, R2, R9, R15}

;
; R11 holds a 16-bit random number via a pseudo-random sequence as per the Linear feedback shift register (Fibonacci) on WikiPedia
; R11 holds a non-zero 16-bit number.  If a zero is fed in the pseudo-random sequence will stay stuck at 0
; Take as many bits of R11 as you need.  If you take the lowest 4 bits then you get a number between 1 and 15.
;   If you take bits 5..1 you'll get a number between 0 and 15 (assuming you right shift by 1 bit).
;
; R11 MUST be initialized to a non-zero 16-bit value at the start of the program OR ELSE!
; R11 can be read anywhere in the code but must only be written to by this subroutine
RandomNum		STMFD		R13!,{R1, R2, R3, R14}

				AND			R1, R11, #0x8000
				AND			R2, R11, #0x2000
				LSL			R2, #2
				EOR			R3, R1, R2
				AND			R1, R11, #0x1000
				LSL			R1, #3
				EOR			R3, R3, R1
				AND			R1, R11, #0x0400
				LSL			R1, #5
				EOR			R3, R3, R1		; the new bit to go into the LSB is present
				LSR			R3, #15
				LSL			R11, #1
				ORR			R11, R11, R3
				
				LDMFD		R13!,{R1, R2, R3, R15}
				
;		Delay 0.1ms (100us) * R0 times
; 		aim for better than 10% accuracy
DELAY			STMFD		R13!,{R2, R14}
MultipleDelay		TEQ		R0, #0				; Test R0 to see if it's 0 - set Zero flag so you can use BEQ, BNE
					BEQ 	exitDelay
					MOV 	R2, #0x0000008D		; Approx 0.1ms
					MUL		R2, R0, R2
DelayLoop			SUBS	R2, #1
					BNE 	DelayLoop
exitDelay		LDMFD		R13!,{R2, R15}
				
; GPIO = General Purpose IO , FIO = Fast IO
LED_BASE_ADR	EQU 	0x2009c000 		; Base address of the memory that controls the LEDs 
FIO2PIN 		EQU		0x2009c054		; Address of the input INT0 push button
FIO1PIN 		EQU		0x2009c034		; Address of the input Joystick P1
PINSEL3			EQU 	0x4002c00c 		; Address of Pin Select Register 3 for P1[31:16]
PINSEL4			EQU 	0x4002c010 		; Address of Pin Select Register 4 for P2[15:0]
;	Usefull GPIO Registers
;	FIODIR  - register to set individual pins as input or output
;	FIOPIN  - register to read and write pins
;	FIOSET  - register to set I/O pins to 1 by writing a 1
;	FIOCLR  - register to clr I/O pins to 0 by writing a 1

				ALIGN 

				END 
